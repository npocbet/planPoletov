
&НаСервере
Функция ВыгрузитьСчетаНаСервере(АдресХранилища, ИмяФайла, НужнаяДата)
	
	//Получаем из временного хранилища файл, который будем заполнять
	ДД = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	//Запишем временный файл в каталог временных файлов + лог файл
	Путь = КаталогВременныхФайлов();
	ДД.Записать(Путь+ИмяФайла);
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(Путь+ИмяФайла);
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("FormS");
	
	// найти все услуги из форм за период
	Запрос = Новый Запрос;
	Запрос1 = Новый Запрос;
	Запрос2 = Новый Запрос;
	Условие = "";
	Условие1 = ""; 	
	Если ИспользоватьПлательщик и Плательщик <> Справочники.Контрагенты.ПустаяСсылка() Тогда
		Условие = " И ФормаСУслуги.Ссылка.Плательщик = &Плательщик";
		Условие1 = " И ФормаС.Плательщик = &Плательщик";
		Запрос.УстановитьПараметр("Плательщик", Плательщик);
		Запрос1.УстановитьПараметр("Плательщик", Плательщик);
		Запрос2.УстановитьПараметр("Плательщик", Плательщик);
	КонецЕсли;
		
	Если ИспользоватьАвиакомпанию и Авиакомпания <> Справочники.Контрагенты.ПустаяСсылка() Тогда
		Условие = Условие + " И ФормаСУслуги.Ссылка.ВладелецВС = &Авиакомпания";
		Условие1 = Условие1 + " И ФормаС.ВладелецВС = &Авиакомпания";
		Запрос.УстановитьПараметр("Авиакомпания", Авиакомпания);
		Запрос1.УстановитьПараметр("Авиакомпания", Авиакомпания);
		Запрос2.УстановитьПараметр("Авиакомпания", Авиакомпания);
	КонецЕсли;
	
	Если ИспользоватьРейс и Рейс <> Справочники.Рейсы.ПустаяСсылка() Тогда
		Условие = Условие + " И ФормаСУслуги.Ссылка.РейсОтправления = &Рейс";
		Условие1 = Условие1 + " И ФормаС.РейсОтправления = &Рейс";
		Запрос.УстановитьПараметр("Рейс", Рейс);
		Запрос1.УстановитьПараметр("Рейс", Рейс);
		Запрос2.УстановитьПараметр("Рейс", Рейс);
	КонецЕсли;
		
	Если ИспользоватьАкт и Авиакомпания <> Документы.ФормаС.ПустаяСсылка() Тогда
		Условие = Условие + " И ФормаСУслуги.Ссылка = &НомерАкта";
		Условие1 = Условие1 + " И ФормаС.Ссылка = &НомерАкта";
		Запрос.УстановитьПараметр("НомерАкта", НомерАкта);
		Запрос1.УстановитьПараметр("НомерАкта", НомерАкта);
		Запрос2.УстановитьПараметр("НомерАкта", НомерАкта);
	КонецЕсли;
	
	Если ИспользоватьСтатусАкта и Строка(СтатусАкта) <> "" Тогда		
		Условие = Условие + " И ФормаСУслуги.Ссылка.Проведен";
		Условие1 = Условие1 + " И ФормаС.Ссылка.Проведен";
	КонецЕсли;
	
	//Сообщить(Условие);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Услуги.Ссылка КАК Ссылка,
		|	Услуги.Наименование КАК Наименование,
		|	Услуги.Код КАК Код
		|ИЗ
		|	Справочник.Услуги КАК Услуги
		|ГДЕ
		|	Услуги.Ссылка В
		|			(ВЫБРАТЬ
		|				ФормаСУслуги.Услуга КАК Услуга
		|			ИЗ
		|				Документ.ФормаС.Услуги КАК ФормаСУслуги
		|			ГДЕ
		|				НАЧАЛОПЕРИОДА(ФормаСУслуги.Ссылка.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)" + Условие + ")";
	Запрос.УстановитьПараметр("Дата", НужнаяДата);
	РезультатЗапроса = Запрос.Выполнить();
	// Services Список услуг – перечень услуг, встречающихся в текущей выгрузке
	ЗаписьXML.ЗаписатьНачалоЭлемента("Services");
	количество_услуг = 0;
	// datetime Дата выгрузки
	ЗаписьXML.ЗаписатьНачалоЭлемента("datetime");
	ЗаписьXML.ЗаписатьТекст(Строка(ТекущаяДата()));
	// datetime
	ЗаписьXML.ЗаписатьКонецЭлемента();       				
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	// сделать по каждой услуге запись в регистр и xml
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.ВыгрузкаУслуг.СоздатьМенеджерЗаписи(); 
		МенеджерЗаписи.Период = ТекущаяДата(); 
		МенеджерЗаписи.Услуга = ВыборкаДетальныеЗаписи.Ссылка;
		МенеджерЗаписи.Записать();
		
		количество_услуг = количество_услуг + 1;
		// service Описание услуги
		ЗаписьXML.ЗаписатьНачалоЭлемента("service");
		// name1 Группа в акте формы С
		ЗаписьXML.ЗаписатьНачалоЭлемента("name1");
		ЗаписьXML.ЗаписатьТекст(ВыборкаДетальныеЗаписи.Наименование);
		// name1
		ЗаписьXML.ЗаписатьКонецЭлемента();
		// name2 Подгруппа в акте формы С
		ЗаписьXML.ЗаписатьНачалоЭлемента("name2");
		ЗаписьXML.ЗаписатьТекст(ВыборкаДетальныеЗаписи.Наименование);
		// name2
		ЗаписьXML.ЗаписатьКонецЭлемента();
		// name3 Наименование услуги
		ЗаписьXML.ЗаписатьНачалоЭлемента("name3");
		// name3
		ЗаписьXML.ЗаписатьКонецЭлемента();
		// code Код услуги в производственной системе
		ЗаписьXML.ЗаписатьНачалоЭлемента("code");
		ЗаписьXML.ЗаписатьТекст(ВыборкаДетальныеЗаписи.Код);
		// code
		ЗаписьXML.ЗаписатьКонецЭлемента();
		// service
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	// count Количество наименований услуг в файле выгрузки 
	ЗаписьXML.ЗаписатьНачалоЭлемента("count");
	ЗаписьXML.ЗаписатьТекст(Строка(количество_услуг));
	// count
	ЗаписьXML.ЗаписатьКонецЭлемента();
	// Services
	ЗаписьXML.ЗаписатьКонецЭлемента();
	// Contractors Список контрагентов, встречающихся в текущей выгрузке
	ЗаписьXML.ЗаписатьНачалоЭлемента("Contractors");
	количество_контрагентов = 0;
	// datetime Дата выгрузки
	ЗаписьXML.ЗаписатьНачалоЭлемента("datetime");
	ЗаписьXML.ЗаписатьТекст(Строка(ТекущаяДата()));
	// datetime
	ЗаписьXML.ЗаписатьКонецЭлемента();
	// найти всех контрагентов из форм
	
	Запрос1.Текст = 
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Ссылка,
		|	Контрагенты.Наименование КАК Наименование,
		|	Контрагенты.Код КАК Код
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Ссылка В
		|				(ВЫБРАТЬ
		|					ФормаС.Плательщик КАК Плательщик
		|				ИЗ
		|					Документ.ФормаС КАК ФормаС
		|				ГДЕ
		|					НАЧАЛОПЕРИОДА(ФормаС.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)" + Условие1 + "
		|				СГРУППИРОВАТЬ ПО
		|					ФормаС.Плательщик)
		|
		|СГРУППИРОВАТЬ ПО
		|	Контрагенты.Ссылка,
		|	Контрагенты.Наименование,
		|	Контрагенты.Код";
	Запрос1.УстановитьПараметр("Дата", НужнаяДата);
	РезультатЗапроса = Запрос1.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	// сделать по каждому контрагенту запись в регистр и xml
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.ВыгрузкаКонтрагентов.СоздатьМенеджерЗаписи(); 
		МенеджерЗаписи.Период = ТекущаяДата(); 
		МенеджерЗаписи.Контрагент = ВыборкаДетальныеЗаписи.Ссылка;
		МенеджерЗаписи.Записать();
		
		количество_контрагентов = количество_контрагентов + 1;
		// contractor Описание контрагента 
		ЗаписьXML.ЗаписатьНачалоЭлемента("contractor");
		// name Наименование контрагента
		ЗаписьXML.ЗаписатьНачалоЭлемента("name");
		ЗаписьXML.ЗаписатьТекст(ВыборкаДетальныеЗаписи.Наименование);
		// name
		ЗаписьXML.ЗаписатьКонецЭлемента();
		// code Код контрагента в производственной системе 
		ЗаписьXML.ЗаписатьНачалоЭлемента("code");          		
		ЗаписьXML.ЗаписатьТекст(ВыборкаДетальныеЗаписи.Код);
		// code
		ЗаписьXML.ЗаписатьКонецЭлемента();
		// contractor
		ЗаписьXML.ЗаписатьКонецЭлемента();		
	КонецЦикла;
	// Count Количество наименований контрагентов в файле выгрузки
	ЗаписьXML.ЗаписатьНачалоЭлемента("count");
	ЗаписьXML.ЗаписатьТекст(Строка(количество_контрагентов));
	// count
	ЗаписьXML.ЗаписатьКонецЭлемента();
	// Contractors
	ЗаписьXML.ЗаписатьКонецЭлемента();
	// Acts Информация по актам
	ЗаписьXML.ЗаписатьНачалоЭлемента("Acts");
	// Datetime Дата выгрузки
	ЗаписьXML.ЗаписатьНачалоЭлемента("datetime");
	ЗаписьXML.ЗаписатьТекст(Строка(ТекущаяДата()));
	// datetime
	ЗаписьXML.ЗаписатьКонецЭлемента();
		
	Запрос2.Текст = 
		"ВЫБРАТЬ
		|	ФормаС.Дата КАК Дата,
		|	ФормаС.Плательщик.Код КАК ПлательщикКод,
		|	""С/"" + ФормаС.Номер КАК ФормаСНомер,
		|	ФормаС.РейсОтправления.Наименование КАК РейсОтправленияНаименование,
		|	ФормаС.НомерБорта КАК НомерБорта,
		|	ФормаС.ТипВС КАК ТипВС,
		|	ФормаС.Проведен КАК Проведен,
		|	ФормаС.СпособОплаты КАК СпособОплаты,
		|	ФормаС.Прилет.ПрибытиеПлан КАК ПрилетПрибытиеПлан,
		|	ФормаС.Прилет.ПрибытиеФакт КАК ПрилетПрибытиеФакт,
		|	ФормаС.Вылет.ОтправлениеПлан КАК ВылетОтправлениеПлан,
		|	ФормаС.Вылет.ВремяВзлета КАК ВылетВремяВзлета,
		|	ВЫБОР
		|		КОГДА ФормаС.ВидФормы = ЗНАЧЕНИЕ(Перечисление.ВидФормы.НаПрилет)
		|			ТОГДА ""Нальчик""
		|		ИНАЧЕ ФормаС.РейсОтправления.АэропортПрилета
		|	КОНЕЦ КАК РейсОтправленияАэропортПрилета,
		|	ФормаС.Ссылка КАК Ссылка,
		|	ФормаС.Плательщик.КодАвиакомпании КАК ПлательщикКодАвиакомпании
		|ИЗ
		|	Документ.ФормаС КАК ФормаС
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(ФормаС.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)" + Условие1;
	
	Запрос2.УстановитьПараметр("Дата", НужнаяДата);
	РезультатЗапроса = Запрос2.Выполнить(); 
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	// Count Количество актов в файле выгрузки
	ЗаписьXML.ЗаписатьНачалоЭлемента("count");
	ЗаписьXML.ЗаписатьТекст(Строка(РезультатЗапроса.Выгрузить().Количество()));
	// count
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// запись в регистр
		МенеджерЗаписи = РегистрыСведений.ВыгрузкаФормС.СоздатьМенеджерЗаписи(); 
		МенеджерЗаписи.Период = ТекущаяДата(); 
		МенеджерЗаписи.ФормаС = ВыборкаДетальныеЗаписи.Ссылка;
		МенеджерЗаписи.Записать();   
		// act Информация по каждому акту формы С или А
		ЗаписьXML.ЗаписатьНачалоЭлемента("act");
		// act_date Дата выполнения рейса (дата акта) – фактическая дата рейса
		ЗаписьXML.ЗаписатьНачалоЭлемента("act_date");
		ЗаписьXML.ЗаписатьТекст(Строка(ВыборкаДетальныеЗаписи.Дата));
		// act_date
		ЗаписьXML.ЗаписатьКонецЭлемента();
		// contractor Код контрагента в производственной системе
		ЗаписьXML.ЗаписатьНачалоЭлемента("contractor");
		ЗаписьXML.ЗаписатьТекст(Строка(ВыборкаДетальныеЗаписи.ПлательщикКод));
		// contractor
		ЗаписьXML.ЗаписатьКонецЭлемента();
		// invoice_no Служебный – не заполняется, в выгрузках – 0
		ЗаписьXML.ЗаписатьНачалоЭлемента("invoice_no");
		ЗаписьXML.ЗаписатьТекст("0");
		// invoice_no
		ЗаписьXML.ЗаписатьКонецЭлемента();
		// act_no Номер акта в производственной системе с префиксом типа акта: 
		// «С/» - акт формы С, оплата по безналу;
		// «А/» - акт формы А, оплата по безналу;
		// «Н/» - любой акт при наличной оплате 
		ЗаписьXML.ЗаписатьНачалоЭлемента("act_no");
		ЗаписьXML.ЗаписатьТекст(Строка(ВыборкаДетальныеЗаписи.ФормаСНомер));
		// act_no
		ЗаписьXML.ЗаписатьКонецЭлемента();
		// services Блок описания услуг по акту
		ЗаписьXML.ЗаписатьНачалоЭлемента("services");
	
		Запрос = Новый Запрос;
		//Запрос.Текст = 
		//	"ВЫБРАТЬ
		//	|	ФормаСУслуги.Услуга.Код КАК УслугаКод,
		//	|	ФормаСУслуги.Услуга.ЕдиницаИзмерения.Наименование КАК УслугаЕдиницаИзмеренияНаименование,
		//	|	ФормаСУслуги.Количество КАК Количество,
		//	|	(100 - ФормаСУслуги.Скидка) / 100 КАК Скидка,
		//	|	ФормаСУслуги.Сумма КАК Сумма,
		//	|	ФормаСУслуги.НДС КАК НДС,
		//	|	ФормаСУслуги.Сумма - ФормаСУслуги.НДС КАК БезНДС,
		//	|	ФормаСУслуги.Цена * (100 - ФормаСУслуги.Скидка) / 100 КАК Цена,
		//	|	ВЫБОР
		//	|		КОГДА ФормаСУслуги.ПревышениеРегламента
		//	|			ТОГДА ФормаСУслуги.Цена * ФормаСУслуги.Количество * 1.4
		//	|		ИНАЧЕ ФормаСУслуги.Цена * ФормаСУслуги.Количество
		//	|	КОНЕЦ КАК БезСкидки,
		//	|	ФормаСУслуги.Ссылка.Грузовой КАК Грузовой,
		//	|	ФормаСУслуги.Ссылка.Плательщик.ВидКонтрагента КАК ПлательщикВидКонтрагента,
		//	|	ВЫБОР
		//	|		КОГДА ФормаСУслуги.Ссылка.ВидФормы = &ВидФормыПрилет
		//	|			ТОГДА ФормаСУслуги.Ссылка.Прилет.АэропортВылета.Иностранный
		//	|		ИНАЧЕ ФормаСУслуги.Ссылка.Вылет.АэропортПрилета.Иностранный
		//	|	КОНЕЦ КАК МВЛ
		//	|ИЗ
		//	|	Документ.ФормаС.Услуги КАК ФормаСУслуги
		//	|ГДЕ
		//	|	ФормаСУслуги.Ссылка = &Ссылка";
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ФормаСУслуги.Услуга.Код КАК УслугаКод,
			|	ФормаСУслуги.Услуга.ЕдиницаИзмерения.Наименование КАК УслугаЕдиницаИзмеренияНаименование,
			|	ФормаСУслуги.Количество КАК Количество,
			|	ВЫБОР
			|		КОГДА ФормаСУслуги.ПревышениеРегламента
			|			ТОГДА 1.4 * (100 - ФормаСУслуги.Скидка) / 100
			|		ИНАЧЕ (100 - ФормаСУслуги.Скидка) / 100
			|	КОНЕЦ КАК Скидка,
			|	ФормаСУслуги.Сумма КАК Сумма,
			|	ФормаСУслуги.НДС КАК НДС,
			|	ФормаСУслуги.Сумма - ФормаСУслуги.НДС КАК БезНДС,
			|	ВЫБОР
			|		КОГДА ФормаСУслуги.ПревышениеРегламента
			|			ТОГДА ФормаСУслуги.Цена * (100 - ФормаСУслуги.Скидка) * 1.4 / 100
			|		ИНАЧЕ ФормаСУслуги.Цена * (100 - ФормаСУслуги.Скидка) / 100
			|	КОНЕЦ КАК Цена,
			|	ВЫБОР
			|		КОГДА ФормаСУслуги.Услуга.ВключаетНДС
			|			ТОГДА ФормаСУслуги.Цена * ФормаСУслуги.Количество * 1.2
			|		ИНАЧЕ ФормаСУслуги.Цена * ФормаСУслуги.Количество
			|	КОНЕЦ КАК БезСкидки,
			|	ФормаСУслуги.Ссылка.Грузовой КАК Грузовой,
			|	ФормаСУслуги.Ссылка.Плательщик.ВидКонтрагента КАК ПлательщикВидКонтрагента,
			|	ВЫБОР
			|		КОГДА ФормаСУслуги.Ссылка.ВидФормы = &ВидФормыПрилет
			|			ТОГДА ФормаСУслуги.Ссылка.Прилет.АэропортВылета.Иностранный
			|		ИНАЧЕ ФормаСУслуги.Ссылка.Вылет.АэропортПрилета.Иностранный
			|	КОНЕЦ КАК МВЛ,
			|	ВЫБОР
			|		КОГДА ФормаСУслуги.Ссылка.ВидФормы = ЗНАЧЕНИЕ(Перечисление.ВидФормы.НаПрилет)
			|			ТОГДА ""A""
			|		ИНАЧЕ ""D""
			|	КОНЕЦ КАК ВидФормы,
			|	ФормаСУслуги.Валюта КАК Валюта,
			|	ФормаСУслуги.Ссылка.КурсВалюты КАК КурсВалюты,
			|	ФормаСУслуги.Ссылка.ЭтоКорректировка КАК ЭтоКорректировка,
			|	ФормаСУслуги.Ссылка.ИсходнаяФорма.Номер КАК ИсходнаяФормаНомер,
			|	ФормаСУслуги.Ссылка.ИсходнаяФорма.Дата КАК ИсходнаяФормаДата,
			|	ФормаСУслуги.Корректировка КАК Корректировка
			|ИЗ
			|	Документ.ФормаС.Услуги КАК ФормаСУслуги
			|ГДЕ
			|	ФормаСУслуги.Ссылка = &Ссылка";

		Запрос.УстановитьПараметр("Ссылка", ВыборкаДетальныеЗаписи.Ссылка);
		Запрос.УстановитьПараметр("ВидФормыПрилет", Перечисления.ВидФормы.НаПрилет);
	
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи1 = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи1.Следующий() Цикл
			// в файл пишем только те строки, по которым нужно корректировать
			Если ВыборкаДетальныеЗаписи1.ЭтоКорректировка и не ВыборкаДетальныеЗаписи1.Корректировка Тогда 
				Продолжить;
			КонецЕсли;
			// service Описание каждой услуги в акте
			ЗаписьXML.ЗаписатьНачалоЭлемента("service");
			// code Код услуги в производственной системе
			ЗаписьXML.ЗаписатьНачалоЭлемента("code");
			ЗаписьXML.ЗаписатьТекст(Строка(ВыборкаДетальныеЗаписи1.УслугаКод));
			// code
			ЗаписьXML.ЗаписатьКонецЭлемента();
			// unit Наименование единицы измерения услуги в производственной системе
			ЗаписьXML.ЗаписатьНачалоЭлемента("unit");
			ЗаписьXML.ЗаписатьТекст(Строка(ВыборкаДетальныеЗаписи1.УслугаЕдиницаИзмеренияНаименование));
			// unit
			ЗаписьXML.ЗаписатьКонецЭлемента();
			// qty Количество услуги в единицах измерения 
			ЗаписьXML.ЗаписатьНачалоЭлемента("qty");
			ЗаписьXML.ЗаписатьТекст(Строка(ВыборкаДетальныеЗаписи1.Количество));
			// qty
			ЗаписьXML.ЗаписатьКонецЭлемента();
			// kff_opl Коэффициент оплаты: если была применена скидка – коэффициент от полной стоимости; если скидки нет = 1
			ЗаписьXML.ЗаписатьНачалоЭлемента("kff_opl");
			ЗаписьXML.ЗаписатьТекст(Строка(ВыборкаДетальныеЗаписи1.Скидка));
			// kff_opl
			ЗаписьXML.ЗаписатьКонецЭлемента();
			// total Сумма за услугу с учетом НДС (руб.) с учетом применения скидки (сумма, реально выставленная в акте).
			// Если применяются прейскуранты в валюте с расчетом в рублях, то выводится расчетная сумма по курсу валюты. 
			// Если контрагент РФ – сумма за услугу с НДС.
			ЗаписьXML.ЗаписатьНачалоЭлемента("total");
			ЗаписьXML.ЗаписатьТекст(Строка(ВыборкаДетальныеЗаписи1.Сумма));
			// total
			ЗаписьXML.ЗаписатьКонецЭлемента(); 			
			// Сумма за услугу с учетом НДС (вал.) с учетом применения скидки
			// (сумма, реально выставленная в акте). Заполняется при расчетах по прейскурантам в валюте. При расчете в рублях = 0.  
			ЗаписьXML.ЗаписатьНачалоЭлемента("total_curr");
			Если ВыборкаДетальныеЗаписи1.Валюта Тогда 
				ЗаписьXML.ЗаписатьТекст(Строка(ОКР(ВыборкаДетальныеЗаписи1.Сумма / ВыборкаДетальныеЗаписи1.КурсВалюты, 2)));
			Иначе 
				ЗаписьXML.ЗаписатьТекст("0");
			КонецЕсли;
			// total_curr
			ЗаписьXML.ЗаписатьКонецЭлемента();
			// Vat Сумма НДС (руб.) с учетом применения скидки (сумма, реально выставленная в акте).
			// Принцип заполнения аналогичен тегу Total.
			ЗаписьXML.ЗаписатьНачалоЭлемента("Vat");
			ЗаписьXML.ЗаписатьТекст(Строка(ВыборкаДетальныеЗаписи1.НДС));
			// Vat
			ЗаписьXML.ЗаписатьКонецЭлемента();			
			// Сумма НДС (вал.) с учетом применения скидки (сумма, реально выставленная в акте).
			// Принцип заполнения аналогичен тегу total_curr.
			ЗаписьXML.ЗаписатьНачалоЭлемента("vat_curr");
			Если ВыборкаДетальныеЗаписи1.Валюта Тогда 
				ЗаписьXML.ЗаписатьТекст(Строка(ОКР(ВыборкаДетальныеЗаписи1.НДС / ВыборкаДетальныеЗаписи1.КурсВалюты, 2)));
			Иначе 
				ЗаписьXML.ЗаписатьТекст("0");
			КонецЕсли;
			// vat_curr
			ЗаписьXML.ЗаписатьКонецЭлемента();
		    // amount Сумма без учета НДС (руб.) с учетом применения скидки (сумма, реально выставленная в акте).
			// Принцип заполнения аналогичен тегу Total.   
			ЗаписьXML.ЗаписатьНачалоЭлемента("Amount");
			ЗаписьXML.ЗаписатьТекст(Строка(ВыборкаДетальныеЗаписи1.БезНДС));
			// amount
			ЗаписьXML.ЗаписатьКонецЭлемента();
			// Сумма без учета НДС (вал.) с учетом применения скидки
			// (сумма, реально выставленная в акте). Принцип заполнения аналогичен тегу total_curr.
			ЗаписьXML.ЗаписатьНачалоЭлемента("amoun_curr");
			Если ВыборкаДетальныеЗаписи1.Валюта Тогда 
				ЗаписьXML.ЗаписатьТекст(Строка(ОКР(ВыборкаДетальныеЗаписи1.БезНДС / ВыборкаДетальныеЗаписи1.КурсВалюты, 2)));
			Иначе 
				ЗаписьXML.ЗаписатьТекст("0");
			КонецЕсли;
			// amount_curr
			ЗаписьXML.ЗаписатьКонецЭлемента();
			// price Цена за единицу измерения с учетом примененной скидки в валюте прейскуранта
			ЗаписьXML.ЗаписатьНачалоЭлемента("price");
			ЗаписьXML.ЗаписатьТекст(Строка(ВыборкаДетальныеЗаписи1.Цена));
			// price
			ЗаписьXML.ЗаписатьКонецЭлемента();
			// total100 Сумма с учетом НДС без учета скидки (руб.) – стопроцентная стоимость услуги. 
			// Принцип заполнения аналогичен тегу Total.
			ЗаписьXML.ЗаписатьНачалоЭлемента("total100");
			ЗаписьXML.ЗаписатьТекст(Строка(ВыборкаДетальныеЗаписи1.БезСкидки));
			// total100
			ЗаписьXML.ЗаписатьКонецЭлемента();
			// Сумма с учетом НДС без учета скидки (руб.) – 
			// стопроцентная стоимость услуги. Принцип заполнения аналогичен тегу total_curr.			
			ЗаписьXML.ЗаписатьНачалоЭлемента("total100_curr");
			Если ВыборкаДетальныеЗаписи1.Валюта Тогда 
				ЗаписьXML.ЗаписатьТекст(Строка(ОКР(ВыборкаДетальныеЗаписи1.БезСкидки / ВыборкаДетальныеЗаписи1.КурсВалюты, 2)));
			Иначе 
				ЗаписьXML.ЗаписатьТекст("0");
			КонецЕсли;
			// total100_curr
			ЗаписьXML.ЗаписатьКонецЭлемента();
			// flight_typ Признак предоставления услуги на прибытие или отправку
			ЗаписьXML.ЗаписатьНачалоЭлемента("flight_typ");
			ЗаписьXML.ЗаписатьТекст(Строка(ВыборкаДетальныеЗаписи1.ВидФормы));
			// flight_typ
			ЗаписьXML.ЗаписатьКонецЭлемента();    			
			// service
			ЗаписьXML.ЗаписатьКонецЭлемента();		
		КонецЦикла;     		
		
		// services
		ЗаписьXML.ЗаписатьКонецЭлемента();
		// flight_no Номер рейса
		ЗаписьXML.ЗаписатьНачалоЭлемента("flight_no");
		ЗаписьXML.ЗаписатьТекст(Строка(ВыборкаДетальныеЗаписи.РейсОтправленияНаименование));
		// flight_no
		ЗаписьXML.ЗаписатьКонецЭлемента();
		// regist_no Номер борта ВС
		ЗаписьXML.ЗаписатьНачалоЭлемента("regist_no");
		ЗаписьXML.ЗаписатьТекст(Строка(ВыборкаДетальныеЗаписи.НомерБорта));
		// regist_no
		ЗаписьXML.ЗаписатьКонецЭлемента();
		// aircr_type Тип ВС 
		ЗаписьXML.ЗаписатьНачалоЭлемента("aircr_type");
		ЗаписьXML.ЗаписатьТекст(Строка(ВыборкаДетальныеЗаписи.ТипВС));
		// aircr_type
		ЗаписьXML.ЗаписатьКонецЭлемента();
		// Consumer Код потребителя – формируется в зависимости от параметров рейса, описание в п.1.
		ЗаписьXML.ЗаписатьНачалоЭлемента("Consumer");
		
		// Потребитель/МВЛ/Грузовой
		Если ВыборкаДетальныеЗаписи1.Грузовой и ВыборкаДетальныеЗаписи1.МВЛ и (не ВыборкаДетальныеЗаписи1.ПлательщикВидКонтрагента = Перечисления.ВидыПолета.Иностранный) Тогда   
			ЗаписьXML.ЗаписатьТекст("1");
		// Иностранный эксплуатант/МВЛ/Грузовой	
		ИначеЕсли ВыборкаДетальныеЗаписи1.Грузовой и ВыборкаДетальныеЗаписи1.МВЛ и ВыборкаДетальныеЗаписи1.ПлательщикВидКонтрагента = Перечисления.ВидыПолета.Иностранный Тогда 
			ЗаписьXML.ЗаписатьТекст("7");
		// Потребитель/ВВЛ/Грузовой
		ИначеЕсли ВыборкаДетальныеЗаписи1.Грузовой и (не ВыборкаДетальныеЗаписи1.МВЛ) и (не ВыборкаДетальныеЗаписи1.ПлательщикВидКонтрагента = Перечисления.ВидыПолета.Иностранный) Тогда 
			ЗаписьXML.ЗаписатьТекст("8");
		// Иностранный эксплуатант/МВЛ/Пассажирский
		ИначеЕсли (не ВыборкаДетальныеЗаписи1.Грузовой) и ВыборкаДетальныеЗаписи1.МВЛ и ВыборкаДетальныеЗаписи1.ПлательщикВидКонтрагента = Перечисления.ВидыПолета.Иностранный Тогда 
			ЗаписьXML.ЗаписатьТекст("11");
		// Потребитель/МВЛ/Пассажирский	
		ИначеЕсли (не ВыборкаДетальныеЗаписи1.Грузовой) и ВыборкаДетальныеЗаписи1.МВЛ и (не ВыборкаДетальныеЗаписи1.ПлательщикВидКонтрагента = Перечисления.ВидыПолета.Иностранный) Тогда 
			ЗаписьXML.ЗаписатьТекст("14");
		// Потребитель/ВВЛ/Пассажирский	
		ИначеЕсли (не ВыборкаДетальныеЗаписи1.Грузовой) и (не ВыборкаДетальныеЗаписи1.МВЛ) и (не ВыборкаДетальныеЗаписи1.ПлательщикВидКонтрагента = Перечисления.ВидыПолета.Иностранный) Тогда 
			ЗаписьXML.ЗаписатьТекст("23");
		// Иностранный эксплуатант/ВВЛ/Пассажирский	
		ИначеЕсли (не ВыборкаДетальныеЗаписи1.Грузовой) и (не ВыборкаДетальныеЗаписи1.МВЛ) и ВыборкаДетальныеЗаписи1.ПлательщикВидКонтрагента = Перечисления.ВидыПолета.Иностранный Тогда 
			ЗаписьXML.ЗаписатьТекст("29");			
		// Иностранный эксплуатант/ВВЛ/Грузовой	
		ИначеЕсли ВыборкаДетальныеЗаписи1.Грузовой и (не ВыборкаДетальныеЗаписи1.МВЛ) и ВыборкаДетальныеЗаписи1.ПлательщикВидКонтрагента = Перечисления.ВидыПолета.Иностранный Тогда 
			ЗаписьXML.ЗаписатьТекст("30");
		КонецЕсли;
		// Consumer
		ЗаписьXML.ЗаписатьКонецЭлемента();
		// Статус закрытия акта:
		// Если акт находится в оперативной работе = 0, если по акту все работы выполнены и все услуги проверены, 
		// акт закрывается на внесение изменений, статус = 1.
		// По таким актам в 1С не будет обновляться информация, даже если она будет выгружена из производственной системы. 
		// Значение 1 закрывает акт для дальнейшей коррекции, можно формировать документы на оплату для контрагентов.

		ЗаписьXML.ЗаписатьНачалоЭлемента("status");
		Если ВыборкаДетальныеЗаписи.Проведен Тогда 
			ЗаписьXML.ЗаписатьТекст("1");
		Иначе
			ЗаписьXML.ЗаписатьТекст("0");
		КонецЕсли;
		// status
		ЗаписьXML.ЗаписатьКонецЭлемента();
		// payment Тип оплаты 	Payment		Тип оплаты	1 – наличная оплата; 2 – безналичная оплата; 3 – оплата пластиковой картой. 
		ЗаписьXML.ЗаписатьНачалоЭлемента("payment");
		Если ВыборкаДетальныеЗаписи.СпособОплаты = Перечисления.СпособыОплаты.Безналичный Тогда 
			ЗаписьXML.ЗаписатьТекст("2");
		ИначеЕсли ВыборкаДетальныеЗаписи.СпособОплаты = Перечисления.СпособыОплаты.Наличными Тогда
			ЗаписьXML.ЗаписатьТекст("1");
		ИначеЕсли ВыборкаДетальныеЗаписи.СпособОплаты = Перечисления.СпособыОплаты.ПластиковойКартой Тогда
			ЗаписьXML.ЗаписатьТекст("3");
		КонецЕсли;         
		// payment
		ЗаписьXML.ЗаписатьКонецЭлемента();
		// purpose Код назначения рейса. В настоящий момент не обрабатывается при загрузке. Можно использовать значение 1
		ЗаписьXML.ЗаписатьНачалоЭлемента("purpose");
		ЗаписьXML.ЗаписатьТекст("0000000001");
		// purpose
		ЗаписьXML.ЗаписатьКонецЭлемента();
		// TODO prz_korr Признак корректировочного акта: оформление акта по измененным значения в закрытом периоде
		// с дальнейшим формированием корректировочных счетов-фактур. 0 – обычный акт, 1 – корректировочный.    
		ЗаписьXML.ЗаписатьНачалоЭлемента("prz_korr");
		Если ВыборкаДетальныеЗаписи1.ЭтоКорректировка Тогда 
			ЗаписьXML.ЗаписатьТекст("1");
		Иначе 
			ЗаписьXML.ЗаписатьТекст("0");
		КонецЕсли;
		// prz_korr
		ЗаписьXML.ЗаписатьКонецЭлемента();    
		// TODO act_1_date Дата первоначального акта для корректировочного акта. Заполняется только если prz_korr = 1		
		ЗаписьXML.ЗаписатьНачалоЭлемента("act_1_date");
		Если ВыборкаДетальныеЗаписи1.ЭтоКорректировка Тогда 
			ЗаписьXML.ЗаписатьТекст(Строка(ВыборкаДетальныеЗаписи1.ИсходнаяФормаДата));
		КонецЕсли;
		// act_1_date
		ЗаписьXML.ЗаписатьКонецЭлемента();
		// TODO act_1_no Номер первоначального акта для корректировочного акта. Заполняется только если prz_korr = 1 
		ЗаписьXML.ЗаписатьНачалоЭлемента("act_1_no");
		Если ВыборкаДетальныеЗаписи1.ЭтоКорректировка Тогда 
			ЗаписьXML.ЗаписатьТекст(Строка(ВыборкаДетальныеЗаписи1.ИсходнаяФормаНомер));
		КонецЕсли;
		// act_1_no
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		// data_time_plan_dep Плановая дата / время прибытия рейса. 
		ЗаписьXML.ЗаписатьНачалоЭлемента("data_time_plan_dep");
		ЗаписьXML.ЗаписатьТекст(Строка(ВыборкаДетальныеЗаписи.ВылетОтправлениеПлан));
		// data_time_plan_dep
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		// data_time_fakt_dep Фактическая дата / время прибытия рейса
		ЗаписьXML.ЗаписатьНачалоЭлемента("data_time_fakt_dep");
		ЗаписьXML.ЗаписатьТекст(Строка(ВыборкаДетальныеЗаписи.ВылетВремяВзлета));
		// data_time_fakt_dep
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		// data_time_plan_arr В примере от 27.05 дата отсутствовала Плановая дата / время вылета рейса. 
		ЗаписьXML.ЗаписатьНачалоЭлемента("data_time_plan_arr");
		// data_time_plan_arr
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		// data_time_fakt_arr В примере от 27.05 дата отсутствовала Фактическая дата / время вылета рейса.  
		ЗаписьXML.ЗаписатьНачалоЭлемента("data_time_fakt_arr");
		// data_time_fakt_arr
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		// airline_co Код авиакомпании
		ЗаписьXML.ЗаписатьНачалоЭлемента("airline_co");
		ЗаписьXML.ЗаписатьТекст(Строка(ВыборкаДетальныеЗаписи.ПлательщикКодАвиакомпании));
		// airline_co
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		// Airport Аэропорт назначения или маршрут рейса
		ЗаписьXML.ЗаписатьНачалоЭлемента("Airport");
		ЗаписьXML.ЗаписатьТекст(Строка(ВыборкаДетальныеЗаписи.РейсОтправленияАэропортПрилета));
		// Airport
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		// act
		ЗаписьXML.ЗаписатьКонецЭлемента();	
	КонецЦикла;
	
	
	// Acts
	ЗаписьXML.ЗаписатьКонецЭлемента();
	// FormS
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.Закрыть();
	
	//После заполнения файла помещаем его во временное хранилище
	ДвД = Новый ДвоичныеДанные(Путь+ИмяФайла);
	АдресВрХранилищца = ПоместитьВоВременноеХранилище(ДвД);
	УдалитьФайлы(Путь, ИмяФайла);
	Возврат АдресВрХранилищца;
КонецФункции

&НаСервере
Процедура СдвинутьГраницуЗапретаИзменений(ТекДат)
	Если ТекДат > Константы.ГраницаЗапретаИзменений.Получить() Тогда 
		Константы.ГраницаЗапретаИзменений.Установить(ТекДат);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога; 
	ДиалогОткрытия = Новый ДиалогВыбораФайла(Режим); 
	ДиалогОткрытия.Каталог = ""; 
	ДиалогОткрытия.МножественныйВыбор = Ложь; 
	ДиалогОткрытия.Заголовок = "Выберите каталог"; 

	Если ДиалогОткрытия.Выбрать() Тогда 
		ПутьККаталогу = ДиалогОткрытия.Каталог + "\"; 
	КонецЕсли;
	
	
	ТекДат = НачалоДня(ПериодВыгрузки.ДатаНачала);
	Пока Не ТекДат = НачалоДня(ПериодВыгрузки.ДатаОкончания) + 86400 Цикл 
		ИмяФайла = "" + Год(ТекДат) + "-" + Месяц(ТекДат) +
			"-" + День(ТекДат) + ".xml";
		// начало записи в XML
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(ПутьККаталогу + ИмяФайла);	
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		ЗаписьXML.Закрыть();
		
		//Помещаем файл во временное хранилище
		ДД = Новый ДвоичныеДанные(ПутьККаталогу + ИмяФайла);
		Адрес = ПоместитьВоВременноеХранилище(ДД);
			
		//На сервере осуществляем заполнение файла
		АдресХранилища = ВыгрузитьСчетаНаСервере(Адрес, ИмяФайла, ТекДат);
		
		ДвД = ПолучитьИзВременногоХранилища(АдресХранилища);
		ДвД.Записать(ПутьККаталогу + ИмяФайла); 		
		
		ТекДат = ТекДат+86400;//Добавим 1 День
	КонецЦикла;
	
	СдвинутьГраницуЗапретаИзменений(ТекДат);
	
	
	
КонецПроцедуры

&НаСервере
Функция СформироватьРеестрНаСервере(АдресХранилища, ИмяФайла)
	//Получаем из временного хранилища файл, который будем заполнять
	ДД = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	//Запишем временный файл в каталог временных файлов + лог файл
	Путь = КаталогВременныхФайлов();
	ДД.Записать(Путь+ИмяФайла);
	
	ТабДок = Новый ТабличныйДокумент; 	  	
	
	Запрос2 = Новый Запрос;
	Условие1 = "";
	Запрос2.Текст = 
		"ВЫБРАТЬ
		|	ФормаС.Дата КАК Дата,
		|	ФормаС.Плательщик.Код КАК ПлательщикКод,
		|	""С/"" + ФормаС.Номер КАК ФормаСНомер,
		|	ФормаС.РейсОтправления.Наименование КАК РейсОтправленияНаименование,
		|	ФормаС.НомерБорта КАК НомерБорта,
		|	ФормаС.ТипВС КАК ТипВС,
		|	ФормаС.Проведен КАК Проведен,
		|	ФормаС.СпособОплаты КАК СпособОплаты,
		|	ФормаС.Прилет.ПрибытиеПлан КАК ПрилетПрибытиеПлан,
		|	ФормаС.Прилет.ПрибытиеФакт КАК ПрилетПрибытиеФакт,
		|	ФормаС.Вылет.ОтправлениеПлан КАК ВылетОтправлениеПлан,
		|	ФормаС.Вылет.ВремяВзлета КАК ВылетВремяВзлета,
		|	ВЫБОР
		|		КОГДА ФормаС.ВидФормы = ЗНАЧЕНИЕ(Перечисление.ВидФормы.НаПрилет)
		|			ТОГДА ""Нальчик""
		|		ИНАЧЕ ФормаС.РейсОтправления.АэропортПрилета
		|	КОНЕЦ КАК РейсОтправленияАэропортПрилета,
		|	ФормаС.Ссылка КАК Ссылка,
		|	ФормаС.Плательщик.КодАвиакомпании КАК ПлательщикКодАвиакомпании
		|ИЗ
		|	Документ.ФормаС КАК ФормаС
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(ФормаС.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)" + Условие1;
	Если ИспользоватьПлательщик и Плательщик <> Справочники.Контрагенты.ПустаяСсылка() Тогда
		Условие1 = " И ФормаС.Плательщик = &Плательщик";
		Запрос2.УстановитьПараметр("Плательщик", Плательщик);
	КонецЕсли;
		
	Если ИспользоватьАвиакомпанию и Авиакомпания <> Справочники.Контрагенты.ПустаяСсылка() Тогда
		Условие1 = Условие1 + " И ФормаС.ВладелецВС = &Авиакомпания";
		Запрос2.УстановитьПараметр("Авиакомпания", Авиакомпания);
	КонецЕсли;
	
	Если ИспользоватьРейс и Рейс <> Справочники.Рейсы.ПустаяСсылка() Тогда
		Условие1 = Условие1 + " И ФормаС.РейсОтправления = &Рейс";
		Запрос2.УстановитьПараметр("Рейс", Рейс);
	КонецЕсли;
		
	Если ИспользоватьАкт и Авиакомпания <> Документы.ФормаС.ПустаяСсылка() Тогда
		Условие1 = Условие1 + " И ФормаС.Ссылка = &НомерАкта";
		Запрос2.УстановитьПараметр("НомерАкта", НомерАкта);
	КонецЕсли;
	
	Если ИспользоватьСтатусАкта и Строка(СтатусАкта) <> "" Тогда		
		Условие1 = Условие1 + " И ФормаС.Ссылка.Проведен";
	КонецЕсли;
	
	РезультатЗапроса = Запрос2.Выполнить().Выгрузить();
	// TODO ТабДок.З
	
КонецФункции

&НаКлиенте
Процедура СформироватьРеестр(Команда)
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога; 
	ДиалогОткрытия = Новый ДиалогВыбораФайла(Режим); 
	ДиалогОткрытия.Каталог = ""; 
	ДиалогОткрытия.МножественныйВыбор = Ложь; 
	ДиалогОткрытия.Заголовок = "Выберите каталог"; 

	Если ДиалогОткрытия.Выбрать() Тогда 
		ПутьККаталогу = ДиалогОткрытия.Каталог + "\"; 
	КонецЕсли;
	ИмяФайла = "Реестр.xls";
	// начало записи в XML
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.Записать(ПутьККаталогу + ИмяФайла, ТипФайлаТабличногоДокумента.XLS);	
	ТабДок.Закрыть();
		
	//Помещаем файл во временное хранилище
	ДД = Новый ДвоичныеДанные(ПутьККаталогу + ИмяФайла);
	Адрес = ПоместитьВоВременноеХранилище(ДД);
			
	//На сервере осуществляем заполнение файла
	АдресХранилища = СформироватьРеестрНаСервере(Адрес, ИмяФайла);
		
	ДвД = ПолучитьИзВременногоХранилища(АдресХранилища);
	ДвД.Записать(ПутьККаталогу + ИмяФайла, ТипФайлаТабличногоДокумента.XLS); 	
КонецПроцедуры



